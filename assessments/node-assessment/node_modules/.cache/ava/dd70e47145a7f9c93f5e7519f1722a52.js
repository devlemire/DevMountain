'use strict';

var _index = require('/Users/jameslemire/Desktop/DevMountain/DevMountain/assessments/node-assessment/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _asyncToGenerator2 = require('/Users/jameslemire/Desktop/DevMountain/DevMountain/assessments/node-assessment/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _supertestAsPromised = require('supertest-as-promised');

var _supertestAsPromised2 = _interopRequireDefault(_supertestAsPromised);

var _server = require('./server');

var _server2 = _interopRequireDefault(_server);

var _faker = require('faker');

var _faker2 = _interopRequireDefault(_faker);

var _users = require('./users.json');

var _users2 = _interopRequireDefault(_users);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('Get all users', function () {
  var _ref = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee(t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var res;
    return _index2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            t.plan(3);
            _context.next = 3;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users').expect(200);

          case 3:
            res = _context.sent;


            t.is(_rec._expr(_rec._capt(_rec._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 13,
              async: true
            }), 200, 'Status is not 200');
            t.deepEqual(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(res, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.deepEqual(res.body[0], users[0], "No user returned")',
              filepath: 'test.js',
              line: 14,
              async: true
            }), _rec3._expr(_rec3._capt(_rec3._capt(_users2.default, 'arguments/1/object')[0], 'arguments/1'), {
              content: 't.deepEqual(res.body[0], users[0], "No user returned")',
              filepath: 'test.js',
              line: 14,
              async: true
            }), "No user returned");
            t.truthy(_rec4._expr(_rec4._capt(_rec4._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body, \'Something is wrong with the response body\')',
              filepath: 'test.js',
              line: 15,
              async: true
            }), 'Something is wrong with the response body');

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get user by language', function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee2(t) {
    var _rec5 = new _powerAssertRecorder(),
        _rec7 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    var req;
    return _index2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?language=klingon').expect(200);

          case 2:
            req = _context2.sent;


            t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(req, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(req.body, \'Request body not found\')',
              filepath: 'test.js',
              line: 23,
              async: true
            }), 'Request body not found');

            req.body.forEach(function (user) {
              var _rec6 = new _powerAssertRecorder();

              t.is(_rec6._expr(_rec6._capt(_rec6._capt(user, 'arguments/0/object').language, 'arguments/0'), {
                content: 't.is(user.language, \'klingon\')',
                filepath: 'test.js',
                line: 26
              }), 'klingon');
            });

            _context2.next = 7;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?language=french').expect(200);

          case 7:
            req = _context2.sent;


            t.truthy(_rec7._expr(_rec7._capt(_rec7._capt(req, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(req.body)',
              filepath: 'test.js',
              line: 33,
              async: true
            }));

            req.body.forEach(function (user) {
              var _rec8 = new _powerAssertRecorder();

              t.is(_rec8._expr(_rec8._capt(_rec8._capt(user, 'arguments/0/object').language, 'arguments/0'), {
                content: 't.is(user.language, \'french\')',
                filepath: 'test.js',
                line: 36
              }), 'french');
            });

            _context2.next = 12;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?language=foo');

          case 12:
            req = _context2.sent;


            t.is(_rec9._expr(_rec9._capt(_rec9._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200)',
              filepath: 'test.js',
              line: 42,
              async: true
            }), 200);
            t.falsy(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(req, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.falsy(req.body[0])',
              filepath: 'test.js',
              line: 43,
              async: true
            }));

          case 15:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get user by privilege', function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee3(t) {
    var _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder(),
        _rec13 = new _powerAssertRecorder();

    var req;
    return _index2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/admin');

          case 2:
            req = _context3.sent;


            t.plan(3 + req.body.length);
            t.is(_rec11._expr(_rec11._capt(_rec11._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200)',
              filepath: 'test.js',
              line: 51,
              async: true
            }), 200);
            t.truthy(_rec12._expr(_rec12._capt(_rec12._capt(req, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(req.body, \'Something is wrong with the request body\')',
              filepath: 'test.js',
              line: 52,
              async: true
            }), 'Something is wrong with the request body');
            t.truthy(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(req, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.truthy(req.body[0], \'No results returned\')',
              filepath: 'test.js',
              line: 53,
              async: true
            }), 'No results returned');

            req.body.forEach(function (user) {
              var _rec14 = new _powerAssertRecorder();

              t.is(_rec14._expr(_rec14._capt(_rec14._capt(user, 'arguments/0/object').type, 'arguments/0'), {
                content: 't.is(user.type, \'admin\')',
                filepath: 'test.js',
                line: 56
              }), 'admin');
            });

          case 8:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());

(0, _ava2.default)('Create new user', function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee4(t) {
    var _rec15 = new _powerAssertRecorder();

    var colLength, newUser, req;
    return _index2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            colLength = _users2.default.length;
            newUser = fakeUser();
            _context4.next = 4;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users').send(newUser);

          case 4:
            req = _context4.sent;


            t.is(_rec15._expr(_rec15._capt(_rec15._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200, \'Make sure you are using bodyParser\')',
              filepath: 'test.js',
              line: 67,
              async: true
            }), 200, 'Make sure you are using bodyParser');

          case 6:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());

(0, _ava2.default)('Create a new admin user', function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee5(t) {
    var _rec16 = new _powerAssertRecorder();

    var newUser, req;
    return _index2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            newUser = fakeUser();
            _context5.next = 3;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users/admin').send(newUser);

          case 3:
            req = _context5.sent;


            t.is(_rec16._expr(_rec16._capt(_rec16._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200)',
              filepath: 'test.js',
              line: 76,
              async: true
            }), 200);

          case 5:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}());

(0, _ava2.default)('Change a users language', function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee6(t) {
    var _rec17 = new _powerAssertRecorder(),
        _rec18 = new _powerAssertRecorder(),
        _rec19 = new _powerAssertRecorder(),
        _rec20 = new _powerAssertRecorder(),
        _rec21 = new _powerAssertRecorder(),
        _rec22 = new _powerAssertRecorder(),
        _rec23 = new _powerAssertRecorder(),
        _rec24 = new _powerAssertRecorder(),
        _rec25 = new _powerAssertRecorder(),
        _rec26 = new _powerAssertRecorder();

    var newUser, id, req;
    return _index2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            newUser = fakeUser();
            id = 5;
            _context6.next = 4;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users').send(newUser);

          case 4:
            req = _context6.sent;


            t.is(_rec17._expr(_rec17._capt(_rec17._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200)',
              filepath: 'test.js',
              line: 86,
              async: true
            }), 200);
            t.truthy(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(req, 'arguments/0/object/object').body, 'arguments/0/object').id, 'arguments/0'), {
              content: 't.truthy(req.body.id)',
              filepath: 'test.js',
              line: 87,
              async: true
            }));
            id = req.body.id;

            _context6.next = 10;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users/language/' + id).send({ language: 'french' });

          case 10:
            req = _context6.sent;


            t.is(_rec19._expr(_rec19._capt(_rec19._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200, \'error changing language\')',
              filepath: 'test.js',
              line: 94,
              async: true
            }), 200, 'error changing language');

            _context6.next = 14;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/' + id);

          case 14:
            req = _context6.sent;


            t.is(_rec20._expr(_rec20._capt(_rec20._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200)',
              filepath: 'test.js',
              line: 99,
              async: true
            }), 200);
            t.truthy(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(req, 'arguments/0/object/object').body, 'arguments/0/object').language, 'arguments/0'), {
              content: 't.truthy(req.body.language)',
              filepath: 'test.js',
              line: 100,
              async: true
            }));
            t.is(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(req, 'arguments/0/object/object').body, 'arguments/0/object').language, 'arguments/0'), {
              content: 't.is(req.body.language, \'french\')',
              filepath: 'test.js',
              line: 101,
              async: true
            }), 'french');

            _context6.next = 20;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users/language/' + id).send({ language: 'klingon' });

          case 20:
            req = _context6.sent;


            t.is(_rec23._expr(_rec23._capt(_rec23._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200, \'error changing language to Klingon\')',
              filepath: 'test.js',
              line: 107,
              async: true
            }), 200, 'error changing language to Klingon');

            _context6.next = 24;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/' + id);

          case 24:
            req = _context6.sent;


            t.is(_rec24._expr(_rec24._capt(_rec24._capt(req, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(req.status, 200)',
              filepath: 'test.js',
              line: 112,
              async: true
            }), 200);
            t.truthy(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(req, 'arguments/0/object/object').body, 'arguments/0/object').language, 'arguments/0'), {
              content: 't.truthy(req.body.language)',
              filepath: 'test.js',
              line: 113,
              async: true
            }));
            t.is(_rec26._expr(_rec26._capt(_rec26._capt(_rec26._capt(req, 'arguments/0/object/object').body, 'arguments/0/object').language, 'arguments/0'), {
              content: 't.is(req.body.language, \'klingon\')',
              filepath: 'test.js',
              line: 114,
              async: true
            }), 'klingon');

          case 28:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  }));

  return function (_x6) {
    return _ref6.apply(this, arguments);
  };
}());

(0, _ava2.default)('add to a users favorite forums', function () {
  var _ref7 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee7(t) {
    var _rec27 = new _powerAssertRecorder(),
        _rec28 = new _powerAssertRecorder(),
        _rec29 = new _powerAssertRecorder(),
        _rec30 = new _powerAssertRecorder(),
        _rec31 = new _powerAssertRecorder(),
        _rec32 = new _powerAssertRecorder();

    var newUser, id, res;
    return _index2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            newUser = fakeUser();
            id = void 0;

            // CREATE A NEW USER

            _context7.next = 4;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users').send(newUser);

          case 4:
            res = _context7.sent;


            t.is(_rec27._expr(_rec27._capt(_rec27._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 126,
              async: true
            }), 200);
            t.truthy(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').id, 'arguments/0'), {
              content: 't.truthy(res.body.id)',
              filepath: 'test.js',
              line: 127,
              async: true
            }));
            id = res.body.id;

            // ADD TO FAVORITE FORUMS
            _context7.next = 10;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users/forums/' + id).send({ add: 'foo' });

          case 10:
            res = _context7.sent;


            t.is(_rec29._expr(_rec29._capt(_rec29._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 135,
              async: true
            }), 200);

            // CHECK IF USER HAS NEW FORUM
            _context7.next = 14;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/' + id);

          case 14:
            res = _context7.sent;


            t.is(_rec30._expr(_rec30._capt(_rec30._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 141,
              async: true
            }), 200);
            t.is(true, _rec31._expr(_rec31._capt(_rec31._capt(Array, 'arguments/1/callee/object').isArray(_rec31._capt(_rec31._capt(_rec31._capt(res, 'arguments/1/arguments/0/object/object').body, 'arguments/1/arguments/0/object').favorites, 'arguments/1/arguments/0')), 'arguments/1'), {
              content: 't.is(true, Array.isArray(res.body.favorites))',
              filepath: 'test.js',
              line: 142,
              async: true
            }));

            t.is(true, _rec32._expr(_rec32._capt(_rec32._capt(_rec32._capt(_rec32._capt(res, 'arguments/1/callee/object/object/object').body, 'arguments/1/callee/object/object').favorites, 'arguments/1/callee/object').reduce(function (a, b) {
              if (b === 'foo') return true;else return false;
            }, false), 'arguments/1'), {
              content: 't.is(true, res.body.favorites.reduce((a, b) => { if (b === \'foo\') return true;else return false; }, false))',
              filepath: 'test.js',
              line: 144,
              async: true
            }));

          case 18:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  }));

  return function (_x7) {
    return _ref7.apply(this, arguments);
  };
}());

(0, _ava2.default)('remove from a users favorite forums', function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee8(t) {
    var _rec33 = new _powerAssertRecorder(),
        _rec34 = new _powerAssertRecorder(),
        _rec35 = new _powerAssertRecorder(),
        _rec36 = new _powerAssertRecorder(),
        _rec37 = new _powerAssertRecorder(),
        _rec38 = new _powerAssertRecorder();

    var newUser, id, res;
    return _index2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            newUser = fakeUser();
            id = void 0;

            // CREATE NEW FORUM

            _context8.next = 4;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users');

          case 4:
            res = _context8.sent;


            t.is(_rec33._expr(_rec33._capt(_rec33._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 162,
              async: true
            }), 200);
            t.truthy(_rec34._expr(_rec34._capt(_rec34._capt(_rec34._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').id, 'arguments/0'), {
              content: 't.truthy(res.body.id)',
              filepath: 'test.js',
              line: 163,
              async: true
            }));
            id = res.body.id;

            // ADD TO USER FORUMS
            _context8.next = 10;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users/forums/' + id).send('foo');

          case 10:
            res = _context8.sent;


            t.is(_rec35._expr(_rec35._capt(_rec35._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 171,
              async: true
            }), 200);

            // Remove from user forums
            _context8.next = 14;
            return (0, _supertestAsPromised2.default)(_server2.default).delete('/api/users/forums/' + id + '?favorite=foo');

          case 14:
            res = _context8.sent;


            t.is(_rec36._expr(_rec36._capt(_rec36._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 177,
              async: true
            }), 200);

            // Check that forum has been deleted
            _context8.next = 18;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/' + id);

          case 18:
            res = _context8.sent;


            t.is(_rec37._expr(_rec37._capt(_rec37._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 183,
              async: true
            }), 200);
            t.true(_rec38._expr(_rec38._capt(_rec38._capt(Array, 'arguments/0/callee/object').isArray(_rec38._capt(_rec38._capt(_rec38._capt(res, 'arguments/0/arguments/0/object/object').body, 'arguments/0/arguments/0/object').favorites, 'arguments/0/arguments/0')), 'arguments/0'), {
              content: 't.true(Array.isArray(res.body.favorites))',
              filepath: 'test.js',
              line: 184,
              async: true
            }));

            res.body.favorites.reduce(function (a, b) {
              return b !== 'foo';
            }, false);

          case 22:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  }));

  return function (_x8) {
    return _ref8.apply(this, arguments);
  };
}());

(0, _ava2.default)('ban(delete) a user', function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee9(t) {
    var _rec39 = new _powerAssertRecorder(),
        _rec40 = new _powerAssertRecorder(),
        _rec41 = new _powerAssertRecorder(),
        _rec42 = new _powerAssertRecorder(),
        _rec43 = new _powerAssertRecorder(),
        _rec44 = new _powerAssertRecorder();

    var user, res;
    return _index2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            user = fakeUser();

            // Create a new user

            _context9.next = 3;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users').send(user);

          case 3:
            res = _context9.sent;


            t.is(_rec39._expr(_rec39._capt(_rec39._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 199,
              async: true
            }), 200);
            t.truthy(_rec40._expr(_rec40._capt(_rec40._capt(_rec40._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').id, 'arguments/0'), {
              content: 't.truthy(res.body.id)',
              filepath: 'test.js',
              line: 200,
              async: true
            }));
            user.id = res.body.id;

            // Delete that user
            _context9.next = 9;
            return (0, _supertestAsPromised2.default)(_server2.default).delete('/api/users/' + user.id);

          case 9:
            res = _context9.sent;


            t.is(_rec41._expr(_rec41._capt(_rec41._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 207,
              async: true
            }), 200);

            // Make sure user does not exist
            _context9.next = 13;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/' + user.id);

          case 13:
            res = _context9.sent;


            t.is(_rec42._expr(_rec42._capt(_rec42._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 404, \'Make sure that when a user is not found that the server returns 404\')',
              filepath: 'test.js',
              line: 213,
              async: true
            }), 404, 'Make sure that when a user is not found that the server returns 404');
            t.truthy(_rec43._expr(_rec43._capt(_rec43._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 214,
              async: true
            }));
            t.falsy(_rec44._expr(_rec44._capt(_rec44._capt(_rec44._capt(res, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.falsy(res.body[0], \'User still exists, delete endpoint is not working\')',
              filepath: 'test.js',
              line: 215,
              async: true
            }), 'User still exists, delete endpoint is not working');

          case 17:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, undefined);
  }));

  return function (_x9) {
    return _ref9.apply(this, arguments);
  };
}());

(0, _ava2.default)('Use queries for get all users', function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee10(t) {
    var _rec45 = new _powerAssertRecorder(),
        _rec46 = new _powerAssertRecorder(),
        _rec48 = new _powerAssertRecorder(),
        _rec49 = new _powerAssertRecorder(),
        _rec50 = new _powerAssertRecorder(),
        _rec52 = new _powerAssertRecorder(),
        _rec53 = new _powerAssertRecorder(),
        _rec54 = new _powerAssertRecorder(),
        _rec56 = new _powerAssertRecorder(),
        _rec57 = new _powerAssertRecorder(),
        _rec58 = new _powerAssertRecorder(),
        _rec60 = new _powerAssertRecorder(),
        _rec61 = new _powerAssertRecorder(),
        _rec62 = new _powerAssertRecorder();

    var res;
    return _index2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?age=49');

          case 2:
            res = _context10.sent;


            t.is(_rec45._expr(_rec45._capt(_rec45._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 224,
              async: true
            }), 200);
            t.truthy(_rec46._expr(_rec46._capt(_rec46._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 225,
              async: true
            }));
            res.body.forEach(function (user) {
              var _rec47 = new _powerAssertRecorder();

              t.true(_rec47._expr(_rec47._capt(_rec47._capt(_rec47._capt(user, 'arguments/0/left/object').age, 'arguments/0/left') == 49, 'arguments/0'), {
                content: 't.true(user.age == 49, \'Age query failed\')',
                filepath: 'test.js',
                line: 227
              }), 'Age query failed');
            });

            // Location
            _context10.next = 8;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?language=english');

          case 8:
            res = _context10.sent;


            t.is(_rec48._expr(_rec48._capt(_rec48._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 234,
              async: true
            }), 200);
            t.truthy(_rec49._expr(_rec49._capt(_rec49._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 235,
              async: true
            }));
            t.truthy(_rec50._expr(_rec50._capt(_rec50._capt(_rec50._capt(res, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.truthy(res.body[0], \'Nothing returned from language query\')',
              filepath: 'test.js',
              line: 236,
              async: true
            }), 'Nothing returned from language query');
            res.body.forEach(function (user) {
              var _rec51 = new _powerAssertRecorder();

              t.true(_rec51._expr(_rec51._capt(_rec51._capt(_rec51._capt(user, 'arguments/0/left/object').language, 'arguments/0/left') === 'english', 'arguments/0'), {
                content: 't.true(user.language === \'english\', \'Language query failed\')',
                filepath: 'test.js',
                line: 238
              }), 'Language query failed');
            });

            // City
            _context10.next = 15;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?city=scranton');

          case 15:
            res = _context10.sent;


            t.is(_rec52._expr(_rec52._capt(_rec52._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 245,
              async: true
            }), 200);
            t.truthy(_rec53._expr(_rec53._capt(_rec53._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 246,
              async: true
            }));
            t.truthy(_rec54._expr(_rec54._capt(_rec54._capt(_rec54._capt(res, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.truthy(res.body[0], \'Nothing returned from city query\')',
              filepath: 'test.js',
              line: 247,
              async: true
            }), 'Nothing returned from city query');

            res.body.forEach(function (user) {
              var _rec55 = new _powerAssertRecorder();

              t.true(_rec55._expr(_rec55._capt(_rec55._capt(_rec55._capt(user, 'arguments/0/left/object').city, 'arguments/0/left') == 'Scranton', 'arguments/0'), {
                content: 't.true(user.city == \'Scranton\', \'City query failed\')',
                filepath: 'test.js',
                line: 250
              }), 'City query failed');
            });

            // State
            _context10.next = 22;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?state=pennsylvania');

          case 22:
            res = _context10.sent;


            t.is(_rec56._expr(_rec56._capt(_rec56._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 257,
              async: true
            }), 200);
            t.truthy(_rec57._expr(_rec57._capt(_rec57._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 258,
              async: true
            }));
            t.truthy(_rec58._expr(_rec58._capt(_rec58._capt(_rec58._capt(res, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.truthy(res.body[0], \'Nothing returned from state query\')',
              filepath: 'test.js',
              line: 259,
              async: true
            }), 'Nothing returned from state query');

            res.body.forEach(function (user) {
              var _rec59 = new _powerAssertRecorder();

              t.true(_rec59._expr(_rec59._capt(_rec59._capt(_rec59._capt(user, 'arguments/0/left/object').state, 'arguments/0/left') == 'Pennsylvania', 'arguments/0'), {
                content: 't.true(user.state == \'Pennsylvania\', \'State query failed\')',
                filepath: 'test.js',
                line: 262
              }), 'State query failed');
            });

            // Gender
            _context10.next = 29;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users?gender=female');

          case 29:
            res = _context10.sent;


            t.is(_rec60._expr(_rec60._capt(_rec60._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 269,
              async: true
            }), 200);
            t.truthy(_rec61._expr(_rec61._capt(_rec61._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 270,
              async: true
            }));
            t.truthy(_rec62._expr(_rec62._capt(_rec62._capt(_rec62._capt(res, 'arguments/0/object/object').body, 'arguments/0/object')[0], 'arguments/0'), {
              content: 't.truthy(res.body[0], \'Nothing returned from gender query\')',
              filepath: 'test.js',
              line: 271,
              async: true
            }), 'Nothing returned from gender query');

            res.body.forEach(function (user) {
              var _rec63 = new _powerAssertRecorder();

              t.true(_rec63._expr(_rec63._capt(_rec63._capt(_rec63._capt(user, 'arguments/0/left/object').gender, 'arguments/0/left') == 'Female', 'arguments/0'), {
                content: 't.true(user.gender == \'Female\')',
                filepath: 'test.js',
                line: 274
              }));
            });

          case 34:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, undefined);
  }));

  return function (_x10) {
    return _ref10.apply(this, arguments);
  };
}());

(0, _ava2.default)('Update one user', function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee11(t) {
    var _rec64 = new _powerAssertRecorder(),
        _rec65 = new _powerAssertRecorder(),
        _rec66 = new _powerAssertRecorder(),
        _rec67 = new _powerAssertRecorder(),
        _rec68 = new _powerAssertRecorder(),
        _rec69 = new _powerAssertRecorder(),
        _rec70 = new _powerAssertRecorder();

    var user, res;
    return _index2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            user = fakeUser();
            _context11.next = 3;
            return (0, _supertestAsPromised2.default)(_server2.default).post('/api/users');

          case 3:
            res = _context11.sent;


            t.is(_rec64._expr(_rec64._capt(_rec64._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 284,
              async: true
            }), 200);
            t.truthy(_rec65._expr(_rec65._capt(_rec65._capt(_rec65._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').id, 'arguments/0'), {
              content: 't.truthy(res.body.id)',
              filepath: 'test.js',
              line: 285,
              async: true
            }));
            user.id = res.body.id;

            // Update user
            _context11.next = 9;
            return (0, _supertestAsPromised2.default)(_server2.default).put('/api/users/' + user.id).send({
              first_name: 'foo',
              last_name: 'bar'
            });

          case 9:
            res = _context11.sent;


            t.is(_rec66._expr(_rec66._capt(_rec66._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Check that put endpoint exists\')',
              filepath: 'test.js',
              line: 296,
              async: true
            }), 200, 'Check that put endpoint exists');

            // Check that update was successful
            _context11.next = 13;
            return (0, _supertestAsPromised2.default)(_server2.default).get('/api/users/' + user.id);

          case 13:
            res = _context11.sent;


            t.is(_rec67._expr(_rec67._capt(_rec67._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200)',
              filepath: 'test.js',
              line: 302,
              async: true
            }), 200);
            t.truthy(_rec68._expr(_rec68._capt(_rec68._capt(res, 'arguments/0/object').body, 'arguments/0'), {
              content: 't.truthy(res.body)',
              filepath: 'test.js',
              line: 303,
              async: true
            }));
            t.is(_rec69._expr(_rec69._capt(_rec69._capt(_rec69._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').first_name, 'arguments/0'), {
              content: 't.is(res.body.first_name, \'foo\', \'User was not changed\')',
              filepath: 'test.js',
              line: 304,
              async: true
            }), 'foo', 'User was not changed');
            t.is(_rec70._expr(_rec70._capt(_rec70._capt(_rec70._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').last_name, 'arguments/0'), {
              content: 't.is(res.body.last_name, \'bar\', \'User was not changed\')',
              filepath: 'test.js',
              line: 305,
              async: true
            }), 'bar', 'User was not changed');

          case 18:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, undefined);
  }));

  return function (_x11) {
    return _ref11.apply(this, arguments);
  };
}());

function fakeUser() {
  var languages = ['english', 'french', 'spanish', 'klingon'];
  var types = ['admin', 'moderator', 'user'];
  var faves = ['cats', 'dogs', 'angular'];
  function getRand(l) {
    return Math.floor(Math.random() * l);
  }
  return {
    first_name: _faker2.default.name.firstName(),
    last_name: _faker2.default.name.lastName(),
    email: _faker2.default.internet.email(),
    gender: Math.random() >= .5 ? "Male" : "Female",
    language: languages[getRand(languages.length)],
    age: Math.floor(Math.random() * 70) + 20,
    city: _faker2.default.address.city(),
    state: _faker2.default.address.state(),
    type: types[getRand(types.length)],
    favorites: faves[getRand(faves.length)]
  };
}
//# sourceMappingURL=node_modules/.cache/ava/dd70e47145a7f9c93f5e7519f1722a52.js.map